{"remainingRequest":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/src/views/Catalogo.vue?vue&type=template&id=1f46eaa0&scoped=true&","dependencies":[{"path":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/src/views/Catalogo.vue","mtime":1622324659894},{"path":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nicolas/Escritorio/Grupo 3_Proyecto Bibliotech/Sistema/Aplicación Web/Frontend/bibliotech/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}